// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String         @unique
  password      String?
  profile_id    String
  profile_pic   String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  profile       Profile        @relation(fields: [profile_id], references: [id])
  reportedTasks Task[]         @relation("reportedBy")
  assignedTasks Task[]         @relation("assignedTo")
  Project       Project[]
  ProjectUsers  ProjectUsers[]

  @@map("users")
}

model Profile {
  id   String @id @default(uuid())
  name String
  User User[]

  @@map("profiles")
}

model Project {
  id           String         @id @default(uuid())
  name         String
  key          String
  leader_id    String
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt
  cover_img    String
  leader       User           @relation(fields: [leader_id], references: [id])
  Task         Task[]
  Column       Column[]
  ProjectUsers ProjectUsers[]

  @@map("projects")
}

model ProjectUsers {
  id         String  @id @default(uuid())
  project_id String
  user_id    String
  project    Project @relation(fields: [project_id], references: [id])
  user       User    @relation(fields: [user_id], references: [id])

  @@map("project_users")
}

model Task {
  id           String       @id @default(uuid())
  title        String
  description  String
  to_solve     String
  to_reproduce String
  priority     PriorityType
  reporter_id  String
  assignee_id  String
  difficulty   String
  type         String
  column_id    String
  project_id   String
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now()) @updatedAt
  project      Project      @relation(fields: [project_id], references: [id])
  reporter     User         @relation("reportedBy", fields: [reporter_id], references: [id])
  assignee     User         @relation("assignedTo", fields: [assignee_id], references: [id])
  column       Column       @relation(fields: [column_id], references: [id])

  @@map("tasks")
}

model Column {
  id         String   @id @default(uuid())
  name       String
  color      String
  order      Int
  project_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  project    Project  @relation(fields: [project_id], references: [id])
  Task       Task[]

  @@map("columns")
}

enum PriorityType {
  HIGHEST
  MEDIUM
  LOW
  LOWEST
}
